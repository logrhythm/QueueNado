# ==================================================================
# 2014 by KjellKod.cc. This is PUBLIC DOMAIN to use at your own
# risk and comes with no warranties.
#
# This code is yours to share, use and modify with no strings attached
# and no restrictions or obligations.
# ===================================================================

cmake_minimum_required (VERSION 2.6)
ENABLE_LANGUAGE(CXX)
#set(CMAKE_BUILD_TYPE Release)

project (QueueNado)
set(PROJECT_SRC ${QueueNado_SOURCE_DIR}/src)
set(DIR_UNIT_TEST ${QueueNado_SOURCE_DIR}/test)
set(DIR_3RDPARTY ${QueueNado_SOURCE_DIR}/3rdparty)
set(CMAKE_INSTALL_RPATH "/usr/local/probe/lib:/usr/local/probe/lib64")
set(CMAKE_SKIP_BUILD_RPATH TRUE)
set(CMAKE_BUILD_WITH_INSTALL_RPATH TRUE)
set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)


find_library(G3LOG g3logger PATHS /usr/local/probe/lib )
set(LIBS ${G3LOG})

find_library(G3FILE_ROTATE g3logrotate PATHS /usr/local/probe/lib)
list(APPEND LIBS ${G3FILE_ROTATE})


find_library(BOOST_THREAD boost_thread PATHS /usr/local/probe/lib )
list(APPEND LIBS ${BOOST_THREAD})

find_library(BOOST_SYSTEM boost_thread PATHS /usr/local/probe/lib )
list(APPEND LIBS ${BOOST_SYSTEM})


find_library(CQueueNado czmq PATHS /usr/local/probe/lib )
list(APPEND LIBS ${CQueueNado})

find_library(ZMQ zmq PATHS /usr/local/probe/lib )
list(APPEND LIBS ${ZMQ})

find_library(ZLIB z PATHS /usr/local/probe/lib )
list(APPEND LIBS ${ZLIB})

find_library(STOPWATCH StopWatch PATHS /usr/local/probe/lib )
list(APPEND LIBS ${STOPWATCH})

find_library(DEATHKNELL DeathKnell PATHS /usr/local/probe/lib )
list(APPEND LIBS ${DEATHKNELL})

#find_library(TCMALLOC tcmalloc PATHS /usr/local/probe/lib )
# Appended first instead
find_library(NANO_MSG nanomsg PATHS /usr/local/lib )
list(APPEND LIBS ${NANO_MSG})

find_library(MPI mpi PATHS /usr/lib64/openmpi/lib )
find_library(MPI_CXX mpi_cxx PATHS /usr/lib64/openmpi/lib )

MESSAGE(" PROJECT_SRC = : ${PROJECT_SRC}")
include_directories(${PROJECT_SRC} /usr/include/openmpi-x86_64/)
SET(ACTIVE_CPP0xx_DIR "Release")


IF ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
   MESSAGE("")
   MESSAGE("cmake for GCC ")
   SET(PLATFORM_LINK_LIBRIES rt)
   SET(CMAKE_CXX_FLAGS "-g -Wall -rdynamic -Wunused -std=c++11 -pthread -D_GLIBCXX_USE_NANOSLEEP")
ENDIF()


# Setup Library name
# Name for the library
SET(LIBRARY_TO_BUILD QueueNado)



# GENERIC STEPS
file(GLOB SRC_FILES ${PROJECT_SRC}/*.h ${PROJECT_SRC}/*.hpp ${PROJECT_SRC}/*.cpp ${PROJECT_SRC}/*.ipp)
 
# Create the QueueNado library
include_directories(${PROJECT_SRC})
add_library(${LIBRARY_TO_BUILD} STATIC  ${SRC_FILES})
SET(QueueNado_VERSION_STRING ${VERSION})
MESSAGE("VERSION: ${VERSION}")
SET_TARGET_PROPERTIES(${LIBRARY_TO_BUILD} PROPERTIES LINKER_LANGUAGE CXX SOVERSION ${VERSION})
TARGET_LINK_LIBRARIES(${LIBRARY_TO_BUILD} ${TCMALLOC})
TARGET_LINK_LIBRARIES(${LIBRARY_TO_BUILD} ${LIBS})



# create the unit tests
# =========================

# create the unit tests
# =========================
set(GTEST_DIR ${DIR_3RDPARTY}/gtest-1.7.0)
set(GTEST_INCLUDE_DIRECTORIES ${GTEST_DIR}/include ${GTEST_DIR} ${GTEST_DIR}/src)
MESSAGE( "Attempt to build gtest. gtest directory: " ${GTEST_DIR})
include_directories(${GTEST_INCLUDE_DIRECTORIES})
add_library(gtest_170_lib ${GTEST_DIR}/src/gtest-all.cc)
set_target_properties(gtest_170_lib PROPERTIES COMPILE_DEFINITIONS "GTEST_HAS_RTTI=0")
enable_testing(true)

include_directories(test)
include_directories(${PROJECT_SRC})
file(GLOB TEST_SRC_FILES "test/*.cpp")

add_executable(UnitTestRunner 3rdparty/test_main.cpp ${TEST_SRC_FILES} )
target_link_libraries(UnitTestRunner ${LIBRARY_TO_BUILD} gtest_170_lib ${LIBS})
set_target_properties(${test} PROPERTIES COMPILE_FLAGS "-isystem -pthread ")

#add_executable(Benchmark 3rdparty/process_benchmark.cpp src/Rifle.cpp src/Vampire.cpp src/NanoMsg.cpp)
add_executable(Benchmark 3rdparty/process_benchmark.cpp )
target_link_libraries(Benchmark ${LIBRARY_TO_BUILD} ${MPI} ${MPI_CXX} ${NANO_MSG})
